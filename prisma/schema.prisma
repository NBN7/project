// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum Theme {
  LIGHT
  DARK
}

enum TransactionType {
  income
  expense
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  theme         Theme     @default(LIGHT)
  description   String?   @default("") @db.VarChar(32)
  balance       Float     @default(0)
  accounts      Account[]
  sessions      Session[]

  // add relations down here
  transactions Transaction[]
  goals        Goal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType @default(expense)
  description String          @default("transaction") @db.VarChar(32)
  date        String
  userId      String
  isForGoal   Boolean         @default(false)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String   @id @default(cuid())
  title       String   @default("Goal") @db.VarChar(32)
  amount      Float
  savedAmount Float    @default(0)
  startDate   DateTime @default(now())
  dueDate     DateTime
  completed   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}
